```tsl
terminate = enum class lexer::type {
+, -, *, /, %, <<, >>,
~, &, |, ^,
++, --, 

!, &&, ||,

==, !=,
<, >, <=, >=,

=,
+=, -=, *=, /=, %=,
<<=, >>=,
&=, |=, ^=,

number_constant, id, str_literal,

BOOLEAN, CHAR, I16, I32,
U16, U32, F32, F64,

TRUE, FALSE,
STRUCT, STR, FN, VOID,
STATIC, CONST,
ENUM, UNION,
NEW, DELETE, DELETE[],
USING, CAST,
DECLTYPE, TYPENAME, FUNC, LAMBDA,
MAIN,

IF, ELSE,
FOR, WHILE, DO,
CONTINUE, BREAK,
RETURN,

SYNCHRONIZED, TID_T, MUTEX_T,
ONCE_FLAG,

,, ., ;,
?, :,
->, ::,
SIZEOF,
(, ),
[, ],
{, },
};
token_type = lexer::Token;
get_type = lexer::getType;

// O(): 0 or 1
// N(): 1 or n
// #(): 0 or n
// S(E, op) = E #(op, E) = E op E ... E

// start from here
program := page main_function page
         | page main_function
         | main_function page
         | main_function
         ;

page := using_sentence 
      | struct_union_specifier ";"
      | enumeration_specifier ";"
      | function_definition
      | function_declaration
      | declaration
      | page using_sentence
      | page struct_union_specifier ";"
      | page enumeration_specifier ";"
      | page function_definition
      | page function_declaration
      | page declaration
      ;


name := "id";
type_name := type_specifier pointer_level                                      // [const] T (*)
           | "CONST" type_specifier pointer_level
           | "DECLTYPE" "(" unary_expression ")" pointer_level                 // static decltype(var)* i = &var
           ;

// expression ---------------------------------------------------------------------------------------

// Arithmetic --------------------------------
primary_expression := name_scope_operator_sequence access_sequence             // A::B::x.a[p->i()][foo()+2]->t
                    | "number_constant"
                    | "str_literal"
                    | "(" expression ")"
                    | lambda_expression
                    ;

lambda_expression := "LAMBDA" "[" capture_list "]" "(" declaration_list_maybe_no_name ")" "->" type_name "{" statemsent_sequence_maybe_null "}"
                   | "LAMBDA" "[" capture_list "]" "(" ")" "->" type_name "{" statemsent_sequence_maybe_null "}"
                   ;
capture_list := capture_list "," name_scope_operator_sequence
              | name_scope_operator_sequence
              | capture_list "," "&" name_scope_operator_sequence
              | "&" name_scope_operator_sequence
              | ;

member_access_operator := "->"
                        | ".";
access_sequence := access_sequence member_access_operator name
                 | access_sequence "[" constant_expression "]"
                 | access_sequence "(" ")"
                 | access_sequence "(" param_list ")"
                 |
                 ;
param_list := unary_expression                                                 // parameter list
            | param_list "," unary_expression
            ;


unary_operator := "&"                                                          // access address
                | "*"                                                          // dereference
                | "!"
                | "-"
                ;
post_fix := "++" 
          | "--";
post_fix_expression := primary_expression post_fix
                     | primary_expression;
pre_fix := "++"
         | "--";
//         | "SIZEOF";                                                         // shift-reduce collision
pre_fix_sequence := pre_fix pre_fix_sequence
                  | pre_fix;
unary_operator_sequence := unary_operator unary_operator_sequence
                         | unary_operator;
unary_expression := unary_operator_sequence pre_fix_sequence post_fix_expression
                  | unary_operator_sequence post_fix_expression
                  | unary_operator_sequence cast_expression
                  | unary_operator_sequence "SIZEOF" "(" type_name ")"
                  | pre_fix_sequence post_fix_expression
                  | post_fix_expression
                  | cast_expression
                  | "SIZEOF" "(" type_name ")"
                  ;
cast_expression := "CAST" "<" type_name ">" "(" unary_expression ")";


multiplicative_operator := "*" 
                         | "%" 
                         | "/";
multiplicative_expression := multiplicative_expression multiplicative_operator unary_expression
                           | unary_expression;
additive_operator := "+"
                   | "-";
additive_expression := additive_expression additive_operator multiplicative_expression
                     | multiplicative_expression;

// Shifts -------------------------------- 39
shift_operator := ">>"
                | "<<";
shift_expression := shift_expression shift_operator additive_expression
                  | additive_expression;

// Relations --------------------------------
relational_operator := "<"
                     | ">"
                     | "<="
                     | ">="
                     | "=="
                     | "!="
                     ;
relational_expression := shift_expression relational_operator shift_expression
                       | shift_expression;

// Bitwise Expressions --------------------------------
and_expression := and_expression "&" relational_expression
                | relational_expression;
xor_expression := xor_expression "^" and_expression
                | and_expression;
or_expression := or_expression "|" xor_expression
               | xor_expression;

// Logical Expressions --------------------------------                                          
logical_AND_expression := logical_AND_expression "&&" or_expression            // A&&B, if A is false, B is not evaluated.
                        | or_expression;
logical_OR_expression := logical_OR_expression "||" logical_AND_expression     // A||B, if A is true, B is not evaluated.
                       | logical_AND_expression;

// Conditional Expressions --------------------------------
conditional_expression := logical_OR_expression "?" expression ":" logical_OR_expression
                        | logical_OR_expression;

// Assignment Statements --------------------------------
assignment_operator := "="
                     | "*="
                     | "/="
                     | "%="
                     | "+="
                     | "<<="
                     | ">>="
                     | "&="
                     | "^="
                     | "|="
                     ;
assignment_expression := conditional_expression assignment_operator conditional_expression
                       | conditional_expression;
expression := expression "," assignment_expression
            | assignment_expression
            ;
constant_expression := conditional_expression;                                 // what the hell it does ???



// Decalration --------------------------------------------------------------------------------------

// [static] [const] type #(*)
declaration_specifier := "STATIC" type_name
                       | type_name
                       ;

// int *a, b; is treated as int* a; int* b !!!!!!!!!!!!!!!!!
declaration := declaration_specifier declarator_list ";";

initializer := name "=" assignment_expression
             | name "=" "NEW" type_name
             | name "=" "NEW" type_name "[" constant_expression "]"
             | name post_declarator_sequence
             ;
comma_initializer_sequence := comma_initializer_sequence "," initializer
                            | ;
declarator_list := initializer comma_initializer_sequence;                     // i=b, j=x, k[2]  S(E op)

// Types --------------------------------
struct_union := "STRUCT"
              | "UNION";

type_specifier := "VOID"                                                       // check void type
                | "BOOLEAN"
                | "CHAR"
                | "I16"
                | "I32"
                | "U16"
                | "U32"
                | "F32"
                | "F64"
                | "STR"                                                        // String should be treated specially.
                | "TID_T"
                | "MUTEX_T"
                | "ONCE_FLAG"
                | "TYPENAME" name_scope_operator_sequence                      // for (struct, union, enum) type
                | "FUNC" "<" type_name "(" ")" ">"
                | "FUNC" "<" type_name "(" type_name_list ")" ">"
                ;

name_scope_operator_sequence := name_scope_operator_sequence "::" name
                              | name;

type_name_list := type_name_list "," type_name
                | type_name;

enumeration_value := name "=" "number_constant"
                   | name;
enumeration_list := enumeration_list "," enumeration_value
                  | enumeration_value;
enumeration_specifier := "ENUM" "id" "{" enumeration_list "}";


using_sentence := "USING" name "=" type_specifier pointer_level ";"            // no const, no static. just T**
                | "USING" name "=" "DECLTYPE" "(" constant_expression ")" pointer_level ";"
                ;

declaration_sequence := declaration_sequence declaration
                      | declaration_sequence using_sentence
                      | ;


struct_union_specifier := struct_union name
                        | struct_union name "{"structure_declarator_list "}";
structure_declarator_list := declaration_sequence;                             // only `using` and `declaration`

pointer_level := "*" pointer_level                                             // #(*)
               | ;

post_declarator := "[" "number_constant" "]";
post_declarator_sequence := post_declarator_sequence post_declarator
                          | ;

// Functions --------------------------------

declaration_list_maybe_no_name := declaration_list_maybe_no_name "," type_name
                                | declaration_list_maybe_no_name "," type_name name
                                | type_name
                                | type_name name
                                ;

function_definition := "FN" name "(" declaration_list_maybe_no_name ")" "->" type_name "{" statemsent_sequence_maybe_null "}"
                     | "FN" name "(" ")" "->" type_name "{" statemsent_sequence_maybe_null "}"
                     | "FN" name "(" declaration_list_maybe_no_name ")" "->" type_name "SYNCHRONIZED" "{" statemsent_sequence_maybe_null "}"
                     | "FN" name "(" ")" "->" type_name "SYNCHRONIZED" "{" statemsent_sequence_maybe_null "}"
                     ;

function_declaration := "FN" name "(" declaration_list_maybe_no_name ")" "->" type_name ";"
                      | "FN" name "(" ")" "->" type_name ";"
                      ;

main_function := "FN" "MAIN" "(" "I32" name "," "CHAR" "*" "*" name ")" "->" "I32" "{" statemsent_sequence_maybe_null "}"
               | "FN" "MAIN" "(" ")" "->" "I32" "{" statemsent_sequence_maybe_null "}";


// Statements --------------------------------------------------------------------------------------

expression_statement := expression ";"
                      | ";";

statemsent_sequence_maybe_null := statemsent_sequence_maybe_null statement
                                | ;

statement := declaration
           | expression_statement
           | iteration_statement
           | jump_statement
           | if_statement
           | using_sentence
           | delete_statement
           | synchronized_block
           ;

// statement --------------------------------

delete_statement := "DELETE" name_scope_operator_sequence access_sequence ";"
                  | "DELETE[]" name_scope_operator_sequence access_sequence ";"
                  ;

jump_statement := "CONTINUE" ";"
                | "BREAK" ";"
                | "RETURN" expression ";"
                | "RETURN" ";";

iteration_statement := "WHILE" "(" expression ")" "{" statemsent_sequence_maybe_null "}"
                     | "DO" "{" statemsent_sequence_maybe_null "}" "WHILE" "(" expression ")" ";"
                     | for_statement
                     ;

for_statement := "FOR" "(" type_name declarator_list ";" expression ";" expression")" "{" statemsent_sequence_maybe_null "}"
               | "FOR" "(" type_name declarator_list ";" expression ";" ")" "{" statemsent_sequence_maybe_null "}"
               | "FOR" "(" type_name declarator_list ";" ";" expression ")" "{" statemsent_sequence_maybe_null "}"
               | "FOR" "(" type_name declarator_list ";" ";" ")" "{" statemsent_sequence_maybe_null "}"
               | "FOR" "(" ";" expression ";" expression")" "{" statemsent_sequence_maybe_null "}"
               | "FOR" "(" ";" expression ";" ")" "{" statemsent_sequence_maybe_null "}"
               | "FOR" "(" ";" ";" expression ")" "{" statemsent_sequence_maybe_null "}"
               | "FOR" "(" ";" ";" ")" "{" statemsent_sequence_maybe_null "}"
               ;

if_statement := "IF" "(" expression ")" "{" statemsent_sequence_maybe_null "}" "ELSE" "{" statemsent_sequence_maybe_null "}"
              | "IF" "(" expression ")" "{" statemsent_sequence_maybe_null "}"
              ;

synchronized_block := "SYNCHRONIZED" "{" statemsent_sequence_maybe_null "}"


```