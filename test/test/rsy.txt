union B;
struct A;

fn goo()-> typename B synchronized {
	b->f = foo();
	i32 i = 1+2*(2.36+ 1_000.2_2)+3;
	typename B b;
	return b;
}

struct A { 
	static i32 _a;
	i32 _b; 
	using A_ptr_t = typename A*; 
};

static i32 count = 0;

fn foo(i32 i, const f64* f, typename B** b) -> typename A {
	typename A a;
	a._b = i;
	synchronized {
        count++;
	}
	return a;
}

union B { 
	i32 i;
	f32 f;
};

fn fuck() -> i32;
fn hoo(const typename A*, decltype(count)* i) -> void;

fn foo(i32 i) -> typename A* {
	typename A a;
	a._b = i;
	hoo(&a);
	return &a;
}


fn main()-> i32 
{
	typename A aObj;
	decltype(aObj)* a = &aObj;
	typename A a =*foo();
	a->_b = A::_a  + 0x123 +0x1A;
	if(a->_b == 3){
		A::_a = 7e1_0;
	}
	for(i32 i = 0; i < 100;i++)
	{
		a->_b++;
		if(i ==0){ break;}
		else {continue;}
	}
	static const f64 f= -.343_233+17 * 8_.23_ + A::_u;
	b=-23 - -7- (-a)++ - -.723_233_9e-4+(0+(b-(b/(7.22)-4))-0u)+ --a.__x;
	bool b = true | false || false & true;
	b+=23 + A::B::u[a->i.t]->x[2][2];
	f64 ff = -9+(2+ -23-.455 +    3.423_2-5)* 1_070_022 %55+ 1_233__123.77 + -.7;
	const char* s = "hello world";
	char c= '\x61';
	using T = decltype(A::B::u.v[a->i.t]->x[fuck()+2][(y>3)? 2 : 1])**;
	using Ap_t = void*;
	using T = typename A::Ap*;
	A::_a = 23u - x[12] - 0x0_1_000_000 + -89;
	return fuck();
}

fn joo(const typename A* a)-> decltype(foo(1))*;

struct A;

fn hoo(const typename A* a, i32*) -> void {
	
}

fn joo(const typename A* a)-> typename A* synchronized {
	
}